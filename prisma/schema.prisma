// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  u_id     String @id @default(uuid())
  u_name   String @unique
  email    String @unique
  role_id  String
  role     Role   @relation(fields: [role_id], references: [r_id], onDelete: Cascade) 
  login_method_id  String?
  loginMethod     LoginMethod?   @relation(fields: [login_method_id], references: [loginMethodId], onDelete: Cascade) 
  hash_pwd String

  tasks            Task[]         @relation("AddedTasks") 
  created_projects Project[]      @relation("CreatedProjects") 
  user_projects    User_Project[] 
  user_tasks       User_Task[]
  notifications  Notification[]
  activities     Activity[]
  comments        Comment[]
}

model Project {
  p_id           String         @id @default(uuid())
  p_name         String         @unique
  p_status_id    String
  project_status Pstatus @relation(fields: [p_status_id], references: [p_status_id], onDelete: Cascade) 
  start_date     DateTime
  end_date       DateTime?
  created_by_id  String
  created_by     User           @relation("CreatedProjects", fields: [created_by_id], references: [u_id], onDelete: Cascade) // âœ… OK
  
  user_projects  User_Project[] 
  tasks          Task[] 
}

model Task {
  t_id           String      @id @default(uuid())
  t_title        String
  t_description  String?
  due_date       DateTime?
  date_created   DateTime
  time_estimate  Float?
  priority       Int?
  time_spent     Float?
  task_status_id String
  task_status    Tstatus @relation(fields: [task_status_id], references: [t_status_id], onDelete: Cascade) 
  p_id           String?
  project        Project?     @relation(fields: [p_id], references: [p_id], onDelete: Cascade) 
  added_by_id    String
  added_by       User        @relation("AddedTasks", fields: [added_by_id], references: [u_id], onDelete: Cascade) 
  
  parent_task_id String? 
  parent_task    Task?      @relation("ParentTaskRelation", fields: [parent_task_id], references: [t_id], onDelete: Cascade)
  subTasks       Task[]     @relation("ParentTaskRelation") 
  
  user_tasks     User_Task[] 
  timeSheets     TimeSheet[] 
  activities Activity[]
  comments Comment[]
}

model User_Task {
  ud_id          String   @id @default(uuid())
  assigned_date       DateTime
  related_to_id  String
  related_to     Task     @relation(fields: [related_to_id], references: [t_id], onDelete: Cascade) 
  assigned_to_id String
  assigned_to    User     @relation(fields: [assigned_to_id], references: [u_id], onDelete: Cascade) 
}

model User_Project {
  up_id          String  @id @default(uuid())
  project_id     String
  project        Project @relation(fields: [project_id], references: [p_id], onDelete: Cascade)
  assigned_to_id String
  assigned_to    User    @relation(fields: [assigned_to_id], references: [u_id], onDelete: Cascade) 
}

model Role {
  r_id      String @id
  role_name String
  users     User[] 
}

model Tstatus {
  t_status_id   String @id @default(uuid())
  t_status_name String
  tasks         Task[] 
}

model Pstatus {
  p_status_id   String    @id @default(uuid())
  p_status_name String
  projects      Project[] 
}

model TimeSheet {
  tSheetId String   @id @default(uuid())
  taskId   String
  task     Task     @relation(fields: [taskId], references: [t_id], onDelete: Cascade)
  date     DateTime
  duration Float
}

model Notification {
  notificationId String @id @default(uuid())
  reciever_id   String
  reciever     User     @relation(fields: [reciever_id], references: [u_id], onDelete: Cascade)
  content String
  status_id   String
  status     Nstatus     @relation(fields: [status_id], references: [statusId], onDelete: Cascade)
  date DateTime
}

model Nstatus {
  statusId String @id @default(uuid())
  status String
  notifications Notification[]
}

model Activity {
  activityId String @id @default(uuid())
  done_by_id String
  done_by    User     @relation(fields: [done_by_id], references: [u_id], onDelete: Cascade)
  related_task_id String
  related_task Task   @relation(fields: [related_task_id], references: [t_id], onDelete: Cascade)
  content String
  date DateTime
}

model Comment {
  commentId String @id @default(uuid())
  sender_id String
  sender User   @relation(fields: [sender_id], references: [u_id], onDelete: Cascade)
  date DateTime
  message String
  related_task_id String
  related_task Task   @relation(fields: [related_task_id], references: [t_id], onDelete: Cascade)
}

model LoginMethod {
  loginMethodId String @id @default(uuid())
  login_method String
  users User[]
}